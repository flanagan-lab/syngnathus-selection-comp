my_size_ratio <- 1
# !!! SEE YOUR DATA HERE !!!
# Your data as generated by python, remove or add more
my_species <- c('Syngnathus floridae Trinity', 'Syngnathus floridae Trinity', 'Syngnathus floridae Trinity', 'Syngnathus floridae Trinity', 'Syngnathus floridae SuperTranscripts', 'Syngnathus floridae SuperTranscripts', 'Syngnathus floridae SuperTranscripts', 'Syngnathus floridae SuperTranscripts')
my_species <- factor(my_species)
my_species <- factor(my_species,levels(my_species)[c(length(levels(my_species)):1)]) # reorder your species here just by changing the values in the vector :
my_percentage <- c(7.0, 87.6, 2.1, 3.3, 90.2, 1.8, 3.2, 4.8)
my_values <- c(253, 3190, 76, 121, 3282, 64, 117, 177)
######################################
######################################
######################################
# Code to produce the graph
labsize = 1
if (length(levels(my_species)) > 10){
labsize = 0.66
}
print("Plotting the figure ...")
category <- c(rep(c("S","D","F","M"),c(1)))
category <-factor(category)
category = factor(category,levels(category)[c(4,1,2,3)])
df = data.frame(my_species,my_percentage,my_values,category)
figure <- ggplot() +
geom_bar(aes(y = my_percentage, x = my_species, fill = category), position = position_stack(reverse = TRUE), data = df, stat="identity", width=my_bar_height) +
coord_flip() +
theme_gray(base_size = 8) +
scale_y_continuous(labels = c("0","20","40","60","80","100"), breaks = c(0,20,40,60,80,100)) +
scale_fill_manual(values = my_colors,labels =c(" Complete (C) and single-copy (S)  ",
" Complete (C) and duplicated (D)",
" Fragmented (F)  ",
" Missing (M)")) +
ggtitle(my_title) +
xlab("") +
ylab("\n%BUSCOs") +
theme(plot.title = element_text(family=my_family, hjust=0.5, colour = "black", size = rel(2.2)*my_size_ratio, face = "bold")) +
theme(legend.position="top",legend.title = element_blank()) +
theme(legend.text = element_text(family=my_family, size = rel(1.2)*my_size_ratio)) +
theme(panel.background = element_rect(color="#FFFFFF", fill="white")) +
theme(panel.grid.minor = element_blank()) +
theme(panel.grid.major = element_blank()) +
theme(axis.text.y = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.text.x = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.line = element_line(size=1*my_size_ratio, colour = "black")) +
theme(axis.ticks.length = unit(.85, "cm")) +
theme(axis.ticks.y = element_line(colour="white", size = 0)) +
theme(axis.ticks.x = element_line(colour="#222222")) +
theme(axis.ticks.length = unit(0.4, "cm")) +
theme(axis.title.x = element_text(family=my_family, size=rel(1.2)*my_size_ratio)) +
guides(fill = guide_legend(override.aes = list(colour = NULL))) +
guides(fill=guide_legend(nrow=2,byrow=TRUE))
for(i in rev(c(1:length(levels(my_species))))){
detailed_values <- my_values[my_species==my_species[my_species==levels(my_species)[i]]]
total_buscos <- sum(detailed_values)
figure <- figure +
annotate("text", label=paste("C:", detailed_values[1] + detailed_values[2], " [S:", detailed_values[1], ", D:", detailed_values[2], "], F:", detailed_values[3], ", M:", detailed_values[4], ", n:", total_buscos, sep=""),
y=3, x = i, size = labsize*4*my_size_ratio, colour = "black", hjust=0, family=my_family)
}
ggsave(figure, file=my_output, width = my_width, height = my_height, unit = my_unit)
print("Done")
figure
######################################
#
# BUSCO summary figure
# @version 4.0.0
# @since BUSCO 2.0.0
#
# Copyright (c) 2016-2023, Evgeny Zdobnov (ez@ezlab.org)
# Licensed under the MIT license. See LICENSE.md file.
#
######################################
# Load the required libraries
library(ggplot2)
library("grid")
# !!! CONFIGURE YOUR PLOT HERE !!!
# Output
my_output <- paste("../imgs/","busco_figure.png",sep="/")
my_width <- 20
my_height <- 15
my_unit <- "cm"
# Colors
my_colors <- c("#56B4E9", "#3492C7", "#F0E442", "#F04442")
# Bar height ratio
my_bar_height <- 0.75
# Legend
my_title <- "BUSCO Assessment Results"
# Font
my_family <- "sans"
my_size_ratio <- 1
# !!! SEE YOUR DATA HERE !!!
# Your data as generated by python, remove or add more
my_species <- c('Syngnathus floridae Trinity', 'Syngnathus floridae Trinity', 'Syngnathus floridae Trinity', 'Syngnathus floridae Trinity', 'Syngnathus floridae SuperTranscripts', 'Syngnathus floridae SuperTranscripts', 'Syngnathus floridae SuperTranscripts', 'Syngnathus floridae SuperTranscripts')
my_species <- factor(my_species)
my_species <- factor(my_species,levels(my_species)[c(length(levels(my_species)):1)]) # reorder your species here just by changing the values in the vector :
my_percentage <- c(7.0, 87.6, 2.1, 3.3, 90.2, 1.8, 3.2, 4.8)
my_values <- c(253, 3190, 76, 121, 3282, 64, 117, 177)
######################################
######################################
######################################
# Code to produce the graph
labsize = 1
if (length(levels(my_species)) > 10){
labsize = 0.66
}
print("Plotting the figure ...")
category <- c(rep(c("S","D","F","M"),c(1)))
category <-factor(category)
category = factor(category,levels(category)[c(4,1,2,3)])
df = data.frame(my_species,my_percentage,my_values,category)
figure <- ggplot() +
geom_bar(aes(y = my_percentage, x = my_species, fill = category), position = position_stack(reverse = TRUE), data = df, stat="identity", width=my_bar_height) +
coord_flip() +
theme_gray(base_size = 8) +
scale_y_continuous(labels = c("0","20","40","60","80","100"), breaks = c(0,20,40,60,80,100)) +
scale_fill_manual(values = my_colors,labels =c(" Complete (C) and single-copy (S)  ",
" Complete (C) and duplicated (D)",
" Fragmented (F)  ",
" Missing (M)")) +
ggtitle(my_title) +
xlab("") +
ylab("\n%BUSCOs") +
theme(plot.title = element_text(family=my_family, hjust=0.5, colour = "black", size = rel(2.2)*my_size_ratio, face = "bold")) +
theme(legend.position="top",legend.title = element_blank()) +
theme(legend.text = element_text(family=my_family, size = rel(1.2)*my_size_ratio)) +
theme(panel.background = element_rect(color="#FFFFFF", fill="white")) +
theme(panel.grid.minor = element_blank()) +
theme(panel.grid.major = element_blank()) +
theme(axis.text.y = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.text.x = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.line = element_line(size=1*my_size_ratio, colour = "black")) +
theme(axis.ticks.length = unit(.85, "cm")) +
theme(axis.ticks.y = element_line(colour="white", size = 0)) +
theme(axis.ticks.x = element_line(colour="#222222")) +
theme(axis.ticks.length = unit(0.4, "cm")) +
theme(axis.title.x = element_text(family=my_family, size=rel(1.2)*my_size_ratio)) +
guides(fill = guide_legend(override.aes = list(colour = NULL))) +
guides(fill=guide_legend(nrow=2,byrow=TRUE))
for(i in rev(c(1:length(levels(my_species))))){
detailed_values <- my_values[my_species==my_species[my_species==levels(my_species)[i]]]
total_buscos <- sum(detailed_values)
figure <- figure +
annotate("text", label=paste("C:", detailed_values[1] + detailed_values[2], " [S:", detailed_values[1], ", D:", detailed_values[2], "], F:", detailed_values[3], ", M:", detailed_values[4], ", n:", total_buscos, sep=""),
y=3, x = i, size = labsize*4*my_size_ratio, colour = "black", hjust=0, family=my_family)
}
ggsave(figure, file=my_output, width = my_width, height = my_height, unit = my_unit)
print("Done")
######################################
#
# BUSCO summary figure
# @version 4.0.0
# @since BUSCO 2.0.0
#
# Copyright (c) 2016-2023, Evgeny Zdobnov (ez@ezlab.org)
# Licensed under the MIT license. See LICENSE.md file.
#
######################################
# Load the required libraries
library(ggplot2)
library("grid")
# !!! CONFIGURE YOUR PLOT HERE !!!
# Output
my_output <- paste("../imgs/","busco_figure.png",sep="/")
my_width <- 20
my_height <- 15
my_unit <- "cm"
# Colors
my_colors <- c("#56B4E9", "#3492C7", "#F0E442", "#F04442")
# Bar height ratio
my_bar_height <- 0.75
# Legend
my_title <- "BUSCO Assessment Results"
# Font
my_family <- "sans"
my_size_ratio <- 1
# !!! SEE YOUR DATA HERE !!!
# Your data as generated by python, remove or add more
my_species <- c('Syngnathus floridae Trinity', 'Syngnathus floridae Trinity', 'Syngnathus floridae Trinity', 'Syngnathus floridae Trinity', 'Syngnathus floridae SuperTranscripts', 'Syngnathus floridae SuperTranscripts', 'Syngnathus floridae SuperTranscripts', 'Syngnathus floridae SuperTranscripts')
my_species <- factor(my_species)
my_species <- factor(my_species,levels(my_species)[c(length(levels(my_species)):1)]) # reorder your species here just by changing the values in the vector :
my_percentage <- c(7.0, 87.6, 2.1, 3.3, 90.2, 1.8, 3.2, 4.8)
my_values <- c(253, 3190, 76, 121, 3282, 64, 117, 177)
######################################
######################################
######################################
# Code to produce the graph
labsize = 1
if (length(levels(my_species)) > 10){
labsize = 0.66
}
print("Plotting the figure ...")
category <- c(rep(c("S","D","F","M"),c(1)))
category <-factor(category)
category = factor(category,levels(category)[c(4,1,2,3)])
df = data.frame(my_species,my_percentage,my_values,category)
figure <- ggplot() +
geom_bar(aes(y = my_percentage, x = my_species, fill = category), position = position_stack(reverse = TRUE), data = df, stat="identity", width=my_bar_height) +
coord_flip() +
theme_gray(base_size = 8) +
scale_y_continuous(labels = c("0","20","40","60","80","100"), breaks = c(0,20,40,60,80,100)) +
scale_fill_manual(values = my_colors,labels =c(" Complete (C) and single-copy (S)  ",
" Complete (C) and duplicated (D)",
" Fragmented (F)  ",
" Missing (M)")) +
ggtitle(my_title) +
xlab("") +
ylab("\n%BUSCOs") +
theme(plot.title = element_text(family=my_family, hjust=0.5, colour = "black", size = rel(2.2)*my_size_ratio, face = "bold")) +
theme(legend.position="top",legend.title = element_blank()) +
theme(legend.text = element_text(family=my_family, size = rel(1.2)*my_size_ratio)) +
theme(panel.background = element_rect(color="#FFFFFF", fill="white")) +
theme(panel.grid.minor = element_blank()) +
theme(panel.grid.major = element_blank()) +
theme(axis.text.y = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.text.x = element_text(family=my_family, colour = "black", size = rel(1.66)*my_size_ratio)) +
theme(axis.line = element_line(size=1*my_size_ratio, colour = "black")) +
theme(axis.ticks.length = unit(.85, "cm")) +
theme(axis.ticks.y = element_line(colour="white", size = 0)) +
theme(axis.ticks.x = element_line(colour="#222222")) +
theme(axis.ticks.length = unit(0.4, "cm")) +
theme(axis.title.x = element_text(family=my_family, size=rel(1.2)*my_size_ratio)) +
guides(fill = guide_legend(override.aes = list(colour = NULL))) +
guides(fill=guide_legend(nrow=2,byrow=TRUE))
for(i in rev(c(1:length(levels(my_species))))){
detailed_values <- my_values[my_species==my_species[my_species==levels(my_species)[i]]]
total_buscos <- sum(detailed_values)
figure <- figure +
annotate("text", label=paste("C:", detailed_values[1] + detailed_values[2], " [S:", detailed_values[1], ", D:", detailed_values[2], "], F:", detailed_values[3], ", M:", detailed_values[4], ", n:", total_buscos, sep=""),
y=3, x = i, size = labsize*4*my_size_ratio, colour = "black", hjust=0, family=my_family)
}
ggsave(figure, file=my_output, width = my_width, height = my_height, unit = my_unit)
print("Done")
#This is a cohesive list of all the libraries used in this document
library(DESeq2)
?plotPCA
#This is a cohesive list of all the libraries used in this document
library(DESeq2)
library(pheatmap)
library(RColorBrewer)
library(PCAtools)
library(ggpubr)
library(cowplot)
library(UpSetR)
#library(ComplexUpset)
library(ggplot2)
library(kableExtra)
library(tidyverse)
library(knitr)
log(1588, base = 2)
log(1579, base = 2)
log(1207, base = 2)
log(1031, base = 2)
log(792, base = 2)
getwd()
setwd("../Desktop/syngnathus-selection-comp")
#This is a cohesive list of all the libraries used in this document
library(ggplot2)
library(cowplot)
library(fBasics)
library(pwr)
library(lme4)
#MomIDs and embryo counts for each section of the male's brood pouch
em_dat <- read.csv("data/EmbryoParentage_floridae.csv")
#Metadata for males and females from the mesocosm experiments
fem_mesoFL <- read.csv("data/all_fem_meso_floridae.csv")
mal_mesoFL <- read.csv("data/all_mal_meso_floridae.csv")
#Adjust the torso depth
fem_mesoFL$depth_adj <- fem_mesoFL$depth/fem_mesoFL$length
mal_mesoFL$depth_adj <- mal_mesoFL$depth/mal_mesoFL$length
#Testing to see if the variances are equal
var.test(fem_mesoFL$length, mal_mesoFL$length) #EQUAL
var.test(fem_mesoFL$depth_adj, mal_mesoFL$depth_adj) #EQUAL
var.test(fem_mesoFL$svl, mal_mesoFL$svl) #NOT EQUAL
#Testing for normal distribution - Females
normalTest(fem_mesoFL$length, method = "da") #NOT NORMAL
normalTest(fem_mesoFL$depth_adj, method = "da") #NORMAL
normalTest(fem_mesoFL$svl, method = "da") #NORMAL
#Testing for normal distribution - Males
normalTest(mal_mesoFL$length, method = "da") #NORMAL
normalTest(mal_mesoFL$depth_adj, method = "da") #NORMAL
normalTest(mal_mesoFL$svl, method = "da") #NORMAL
#Combining the datasets
fem_mesoFL$Sex <- "F"
mal_mesoFL$Sex <- "M"
all_sex_meso <- rbind(fem_mesoFL[, c("length", "depth_adj", "svl", "Sex")], mal_mesoFL[, c("length", "depth_adj", "svl", "Sex")])
length <- ggplot(data = all_sex_meso, aes(x = length)) +
geom_histogram(aes(fill = Sex),
alpha = 0.5,
position = 'identity') +
scale_fill_manual(values = c("#7fc97f75", "#beaed475")) +
theme_minimal() +
labs(x = "Length (mm)",
y = "Number of Pipefish",
title = "Length of male and female pipefish")
depth <- ggplot(data = all_sex_meso, aes(x = depth_adj)) +
geom_histogram(aes(fill = Sex),
alpha = 0.5,
position = 'identity') +
scale_fill_manual(values = c("#7fc97f75", "#beaed475")) +
theme_minimal() +
labs(x = "Depth (mm)",
y = "Number of Pipefish",
title = "Depth of male and female pipefish")
svl <- ggplot(data = all_sex_meso, aes(x = svl)) +
geom_histogram(aes(fill = Sex),
alpha = 0.5,
position = 'identity') +
scale_fill_manual(values = c("#7fc97f75", "#beaed475")) +
theme_minimal() +
labs(x = "SVL (mm)",
y = "Number of Pipefish",
title = "Snout-vent length of male and female pipefish")
plot_grid(length, depth, svl,
ncol = 3)
#Row-by-Row analysis of parentage data by male brood pouch section
#Read in the data
#em_dat <- read.csv("~/EmbryoParentage.csv")
#For each row in the dataset(each section of the pouch) apply this function
mom_counts <- do.call(rbind,apply(em_dat, 1, function(one_section){
#Save all of the momIDs into an object
mom_ids<-c(one_section[grep("momID",names(one_section))])
#Calculate the number of eggs that belongs to each potential mom based on
#the proportions and total number of developed and undeveloped embryos
mom_props<-c(as.numeric(one_section[grep("prop",names(one_section))]))
mom_counts_dev<-mom_props*as.numeric(one_section["num_embryos_dev"])
mom_counts_und<-mom_props*as.numeric(one_section["num_embryos_non_dev"])
#Create a dataframe that contains the maleID, pouch section number and the
#number of eggs that belongs to each momID
this_section<-data.frame(
maleID=one_section["maleID"],
section_num=one_section["section_num"],
mom_ids[which((mom_counts_dev + mom_counts_und) > 0)],
mom_counts_dev[which((mom_counts_dev + mom_counts_und)>0)],
mom_counts_und[which((mom_counts_dev + mom_counts_und)>0)]
)
#Rename the columns
colnames(this_section)[3:5]<-c("momID","num_dev","num_und")
return(this_section)
}))
#Calculate female fitness
fem_fitness<-do.call(rbind,by(mom_counts, mom_counts$momID,function(dat){
mom_fitness<-data.frame(
momID=unique(dat$momID),
MatingSuccess=length(unique(dat$maleID)),
NumDeveloped=round(sum(dat$num_dev)),
NumUndeveloped=round(sum(dat$num_und))
)
return(mom_fitness)
}))
fem_fitness$totalEggs <- fem_fitness$NumDeveloped + fem_fitness$NumUndeveloped
#Calculate Male Fitness
mal_fitness<-do.call(rbind,by(mom_counts, mom_counts$maleID,function(dat){
dad_fitness<-data.frame(
maleID=unique(dat$maleID),
MatingSuccess=length(unique(dat$momID)),
NumDeveloped_Calc=round(sum(dat$num_dev)),
NumUndeveloped_Calc=round(sum(dat$num_und))
)
return(dad_fitness)
}))
mal_fitness$totalEggs <- mal_fitness$NumDeveloped_Calc + mal_fitness$NumUndeveloped_Calc
#Make a column in *_meso that contains the full fishID (i.e. FL1M3) to match the
#formatting in the fitness datasets (make sure they have the same name for merging purposes)
fem_mesoFL$momID <- paste0("FL", fem_mesoFL$trial_num, "F", fem_mesoFL$fishID)
mal_mesoFL$maleID <- paste0("FL", mal_mesoFL$trial_num, "M", mal_mesoFL$fishID)
#Merge the datasets based on the columns created above
fem_allFL <- merge(fem_mesoFL, fem_fitness, by = "momID", all.x = TRUE, all.y = TRUE)
mal_allFL <- merge(mal_mesoFL, mal_fitness, by = "maleID", all.x = TRUE, all.y = TRUE)
#Subset the merged datasets to remove trials without successful matings and Trial 1
fem_succFL <- subset(fem_allFL, !(trial_num %in% c(7, 9, 10, 11, 1)))
mal_succFL <- subset(mal_allFL, !(trial_num %in% c(7, 9, 10, 11, 1)))
#Replace NAs with 0s in the columns related to fitness
mal_succFL[, c("MatingSuccess", "NumDeveloped_Calc",
"NumUndeveloped_Calc", "totalEggs")] <- sapply(mal_succFL[, c("MatingSuccess",
"NumDeveloped_Calc",
"NumUndeveloped_Calc",
"totalEggs")],
function(x)
ifelse(is.na(x), 0, x))
fem_succFL[, c("MatingSuccess", "NumDeveloped",
"NumUndeveloped", "totalEggs")] <- sapply(fem_succFL[, c("MatingSuccess",
"NumDeveloped",
"NumUndeveloped",
"totalEggs")],
function(x)
ifelse(is.na(x), 0, x))
#Add a column for females to denote mated or unmated
fem_succFL$mated <- ifelse(fem_succFL$MatingSuccess > 0, 1, 0)
#create a subset of only the males who mated
mated_malFL <- mal_succFL[mal_succFL$preg_status == 1, ]
#Plot brood size against the different metrics for pouch size
par(mfrow=c(1,2))
plot(mated_malFL$bp_area,
mated_malFL$totalEggs,
xlab = expression(paste("Brood Pouch Area (mm"^2*")")),
ylab = "Brood Size (# embryos)",
col = "darkorange",
pch = 19)
abline(lm(mated_malFL$totalEggs ~ as.numeric(mated_malFL$bp_area)), lwd = 3, lty = 2)
plot(mated_malFL$bp_length,
mated_malFL$totalEggs,
xlab = "Brood Pouch Length (mm)",
ylab = "Brood Size (# embryos)",
col = "cyan4",
pch = 19)
abline(lm(mated_malFL$totalEggs ~ as.numeric(mated_malFL$bp_length)), lwd = 3, lty = 2)
#create a subset of only the females who mated
mated_femFL <- fem_succFL[fem_succFL$mated == 1, ]
#Plot total number of eggs transferred against the different metrics for females size
par(mfrow=c(1,3))
plot(mated_femFL$length,
mated_femFL$totalEggs,
xlab = "Length (mm)",
ylab = "Number of eggs transferred",
col = "darkorange",
pch = 19)
abline(lm(mated_femFL$totalEggs ~ mated_femFL$length), lwd = 3, lty = 2)
plot(mated_femFL$depth_adj,
mated_femFL$totalEggs,
xlab = "Depth (mm)",
ylab = "Number of eggs transferred",
col = "cyan4",
pch = 19)
abline(lm(mated_femFL$totalEggs ~ mated_femFL$depth_adj), lwd = 3, lty = 2)
plot(mated_femFL$svl,
mated_femFL$totalEggs,
xlab = "Snout-vent Length (mm)",
ylab = "Number of eggs transferred",
col = "purple",
pch = 19)
abline(lm(mated_femFL$totalEggs ~ mated_femFL$svl), lwd = 3, lty = 2)
par(mfrow=c(2,3))
mal_succFL$preg_status <- as.factor(mal_succFL$preg_status)
boxplot(mal_succFL$length ~ mal_succFL$preg_status,
xlab = "Mated",
ylab = "Length (mm)",
col= c("darkorange", "cyan4"))
boxplot(mal_succFL$depth_adj ~ mal_succFL$preg_status,
xlab = "Mated",
ylab = "Depth (mm)",
col= c("darkorange", "cyan4"))
boxplot(mal_succFL$svl ~ mal_succFL$preg_status,
xlab = "Mated",
ylab = "Snout-vent Length (mm)",
col= c("darkorange", "cyan4"))
boxplot(as.numeric(mal_succFL$bp_area) ~ mal_succFL$preg_status,
xlab = "Mated",
ylab = expression(paste("Brood Pouch Area (mm"^2*")")),
col= c("darkorange", "cyan4"))
boxplot(mal_succFL$bp_length ~ mal_succFL$preg_status,
xlab = "Mated",
ylab = "Brood Pouch Length (mm)",
col= c("darkorange", "cyan4"))
boxplot(mal_succFL$weight ~ mal_succFL$preg_status,
xlab = "Mated",
ylab = "Weight (g)",
col= c("darkorange", "cyan4"))
par(mfrow = c(1,2))
hist(mal_allFL$length,
xlab = "Length (mm)",
ylab = "Number of male pipefish",
col = "#beaed4", breaks = 15, main = "")
hist(mal_allFL$length[mal_allFL$preg_status != 0],
add = TRUE,
col = "#8968CD", breaks = 15)
hist(mal_allFL$svl,
xlab = "Snout-vent length (mm)",
ylab = "Number of male pipefish",
col = "#beaed4", breaks = 15, main = "")
hist(mal_allFL$svl[mal_allFL$preg_status !=  0],
add = TRUE,
col = "#8968CD", breaks = 12)
legend("topright",
legend = c("Mated Males", "All Males"),
col = c("#8968CD", "#beaed4"),
pch = 15)
#Mating success
##Create the model
mate_succlm <- lmer(mal_succFL$MatingSuccess ~ mal_succFL$lat_to_trial +
(1 | mal_succFL$col_location) + (1 | mal_succFL$col_date))
#Mating success
##Create the model
mate_succlm <- lmer(mal_succFL$MatingSuccess ~ mal_succFL$lat_to_trial +
(1 | mal_succFL$col_location) + (1 | mal_succFL$col_date))
library(lme4)
#Mating success
##Create the model
mate_succlm <- lmer(mal_succFL$MatingSuccess ~ mal_succFL$lat_to_trial +
(1 | mal_succFL$col_location) + (1 | mal_succFL$col_date))
library(lmtest)
#Mating success
##Create the model
mate_succlm <- lmer(mal_succFL$MatingSuccess ~ mal_succFL$lat_to_trial +
(1 | mal_succFL$col_location) + (1 | mal_succFL$col_date))
tools::package_dependencies("Matrix", which = "LinkingTo", reverse = TRUE)[[1L]]
utils::install.packages("lme4", type = "source")
detach(lme4)
detach('lme4')
detach("package:lme4", unload = TRUE)
utils::install.packages("lme4", type = "source")
library(lme4)
#Mating success
##Create the model
mate_succlm <- lmer(mal_succFL$MatingSuccess ~ mal_succFL$lat_to_trial +
(1 | mal_succFL$col_location) + (1 | mal_succFL$col_date))
detach("package:lme4", unload = TRUE)
oo <- options(repos = "https://cran.r-project.org/")
utils::install.packages("Matrix")
utils::install.packages("lme4")
oo <- options(repos = "https://cran.r-project.org/")
utils::install.packages("Matrix")
utils::install.packages("lme4")
library(Matrix)
detach("package:Matrix", unload = TRUE)
utils::install.packages("Matrix")
